@title MessagePack-RPC/Erlang
@doc MessagePack-RPC/Erlang is an Erlang implementation of <a href="http://redmine.msgpack.org/projects/msgpack/wiki/RPCDesign">MessagePack-RPC</a>.
<h2>Prequisites</h2>
All you need is <a href="http://erlang.org">Erlang</a> (and BSD/GNU make). 
<h2>Installation</h2>
<pre>
$ git clone git://github.com/kuenishi/erl_msgpack.git
$ cd erl_msgpack
$ make
</pre>
<h2>Usage/Programming Guide</h2>
See <a href="http://redmine.msgpack.org/projects/msgpack/wiki/QuickStartErlang">wiki</a>, please.
<h2>Current Status</h2>
Now developing. First release (0.0.1) is coming soon.
<h2>Tutorial</h2>
<h3>Client</h3>
You need to implement client in <code>behaviour_info</code> way; override following methods of
<code></code>
<ol>
<li>mp_client:connect/3</li>
<li>mp_client:call/4</li>
<li>mp_client:close/1</li>
</ol>
<h3>Server</h3>
set messagepack-rpc server under your supervisor.
<pre>
ChildSpecs = [{msgpack_rpc_srv0,
	       {mprs_tcp, start_link, [YourSessionMod,Options]}
	        permanent, 2000, worker, []},
	      {msgpack_rpc_srv1,
	       {mprs_udp, start_link, [YourSessionMod2,Options]}
	        permanent, 2000, worker, []}],
</pre>
each module name of servers is in most ways <code>mprs_&lt;transport name&gt; </code>, such as tcp, udp, sctp, ssl and more (most of them are coming soon).
<h3>Message Protocol</h3>
<h4>Request</h4>
<h4>Response</h4>
<h4>Notification</h4>
<h2>See Also</h2>
<ul>
  <li><a href="http://www.slideshare.net/frsyuki/architecture-of-messagepack">Architecture of MessagePack</a></li>
</ul>
@end
